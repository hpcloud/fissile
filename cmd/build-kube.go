package cmd

import (
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var (
	flagBuildKubeOutputDir          string
	flagBuildKubeDefaultEnvFiles    []string
	flagBuildKubeDockerRegistry     string
	flagBuildKubeDockerOrganization string
	flagBuildKubeUseMemoryLimits    bool
)

// buildKubeCmd represents the kube command
var buildKubeCmd = &cobra.Command{
	Use:   "kube",
	Short: "Creates Kubernetes configuration files.",
	Long:  ``,
	RunE: func(cmd *cobra.Command, args []string) error {

		flagBuildKubeOutputDir = viper.GetString("kube-output-dir")
		flagBuildKubeDefaultEnvFiles = splitNonEmpty(viper.GetString("defaults-file"), ",")
		flagBuildKubeDockerRegistry = viper.GetString("docker-registry")
		flagBuildKubeDockerOrganization = viper.GetString("docker-organization")
		flagBuildKubeUseMemoryLimits = viper.GetBool("use-memory-limits")

		err := fissile.LoadReleases(
			flagRelease,
			flagReleaseName,
			flagReleaseVersion,
			flagCacheDir,
		)
		if err != nil {
			return err
		}

		return fissile.GenerateKube(
			flagRoleManifest,
			flagBuildKubeOutputDir,
			flagRepository,
			flagBuildKubeDockerRegistry,
			flagBuildKubeDockerOrganization,
			flagBuildKubeDefaultEnvFiles,
			flagBuildKubeUseMemoryLimits,
			flagReleaseBuild,
		)

	},
}

func init() {
	buildCmd.AddCommand(buildKubeCmd)

	buildKubeCmd.PersistentFlags().StringP(
		"kube-output-dir",
		"k",
		".",
		"Kubernetes configuration files will be written to this directory",
	)

	buildKubeCmd.PersistentFlags().StringP(
		"defaults-file",
		"D",
		"",
		"Env files that contain defaults for the parameters generated by kube",
	)

	buildKubeCmd.PersistentFlags().StringP(
		"docker-registry",
		"",
		"",
		"Docker registry used when referencing image names",
	)

	buildKubeCmd.PersistentFlags().StringP(
		"docker-organization",
		"",
		"",
		"Docker organization used when referencing image names",
	)

	buildKubeCmd.PersistentFlags().BoolP(
		"use-memory-limits",
		"",
		true,
		"Include memory limits when generating kube configurations",
	)

	viper.BindPFlags(buildKubeCmd.PersistentFlags())
}
